===========================
Reusing Compiled JSON Files
===========================

.. contents::
   :local:
   :depth: 2

Similar to how we can reuse compiled JSON files in calls to method **Compile(string jsonText, string jsonTextIdentifier, IReadOnlyList<ICompiledJsonData> compiledParents)** in `JsonQL.Compilation.IJsonCompiler <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/IJsonCompiler.cs>`_ (demonstrated in :doc:`../../MutatingJsonFiles/index`) we can also pre-compile JSON files and re-use them when calling the overloaded methods **QueryObject(..., IReadOnlyList<ICompiledJsonData> compiledJsonDataToQuery,...)** and **QueryJsonValue(..., IReadOnlyList<ICompiledJsonData> compiledJsonDataToQuery,...)** in `JsonQL.Query.IQueryManager <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Query/IQueryManager.cs>`_, as well when calling extension methods for interface **JsonQL.Query.IQueryManager** that use the parameter **IReadOnlyList<ICompiledJsonData> compiledJsonDataToQuery**.

Pre-compiling JSON files and using them in calls to the overloaded methods for queries (**QueryObject<TQueriedObject>(...)** and **QueryJsonValue**) makes more sense then using overloaded methods that use parameter of type `JsonQL.Compilation.IJsonTextData.cs <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/IJsonTextData.cs>`_ (**IJsonTextData** stores JSON files as text strings) is more efficient when we need to execute multiple queries against the same JSON files.

The example in code snipped below compiles the following JSON files first, and then uses these compiled files in queries:

- :doc:`../SampleFiles/parameters`
- :doc:`../SampleFiles/countries`
- :doc:`../SampleFiles/companies`
- :doc:`../SampleFiles/filtered-companies`

To re-use the compiled parent JSON files in JsonQL queries without compiling them again do the following:

  - Call **ICompilationResult Compile(IJsonTextData jsonTextData)** the method to compile only parent JSON files.
  - Execute queries by calling the overloaded methods **QueryObject(..., IReadOnlyList<ICompiledJsonData> compiledJsonDataToQuery,...)** (or similar extension methods) that take **IReadOnlyList<ICompiledJsonData> compiledParents** as a parameter.
      - Generate the list used for parameter **compiledParents** from compiled JSON objects generated in first step above.

Here is a code snippet demonstrating this approach:

.. sourcecode:: csharp

    <IncludedFilePlaceHolder>Example\Example.cs.snippet</IncludedFilePlaceHolder>

- In this example we do the following:
    - Compile parent JSON files and store the result in **cachedCompilationResult**
    - Execute the first query "FilteredCompanies.Select(c => c.Employees).Where(e => e.Age >= 40)" by passing a list generated from compiled JSON "FilteredCompanies.json" as a parameter in method call **queryManager.QueryObject<IReadOnlyList<IEmployee>>**.
    - Execute the second query "Countries.Where(c => Any(FilteredCountryNames.Where(fc => fc == c.Name)))" by passing a list generated from compiled JSON files "Parameters.json" and "Countries.json" (with "Countries.json" being treated as a child of "Parameters.json") as a parameter in method call **queryManager.QueryJsonValue**.
