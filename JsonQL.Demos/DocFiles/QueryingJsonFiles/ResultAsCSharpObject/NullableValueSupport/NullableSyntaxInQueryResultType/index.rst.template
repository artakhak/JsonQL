====================================
Nullable Syntax in Query Result Type
====================================

.. contents::
   :local:
   :depth: 3

- To specify return type nullability we should pass non-null optional parameter **convertedValueNullability** in calls to overloaded method **JsonQL.Query.IQueryManager.QueryObject<TQueriedObject>(...)**.
- **convertedValueNullability** parameter type is a collection of boolean values with the following meaning: The first value indicates if return value can be null, the second value indicates if items in collection in returned value can be null, the third value indicates if items in collections of collection in returned type can be null and so forth (examples below will clarify this).
- The nullability syntax ("?" symbols) used with queried object (i.e., generic parameter type value used for **TQueriedObject** in call to **JsonQL.Query.IQueryManager.QueryObject<TQueriedObject>(...)**) should correspond to values in parameter **convertedValueNullability**, however only the values in **convertedValueNullability** will result in errors being reported if values are null.
    
    .. note::
        We normally should not have to use parameter **convertedValueNullability** and should instead just derive nullability from the return type (using "?" syntax attributes), but during development of JsonQL it was difficult to derive this information for reference return types (this is no issue for nullable value types). This information is derived currently for nullable properties, but not reference return types. In tne future we might be able to derive nullability for return reference types as well, and the parameter might be removed at that point.

- If optional parameter **convertedValueNullability** is not used or is null, return type is assumed to be nullable (both type as well as collection item types). In other words, no errors will be reported if value is null or any collection item value is null. 
- If the returned type is specified to have non-nullable, and the value is missing, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **ValueNotSet**.
- If a collection item type nullability is specified as non-nullable, and collection item is not set in returned value, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **NonNullableCollectionItemValueNotSet**.

Examples
--------

Result as Value Type
~~~~~~~~~~~~~~~~~~~~

- In the example below the query result is expected to be of non-nullable type **double**. 
- If the result is null, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **ValueNotSet**. 

.. raw:: html

   <details>
   <summary>Click to expand <b>Company.json</b> used in query in example below</summary>

.. code-block:: json

    <IncludedFilePlaceHolder>..\..\..\JsonFiles\Companies.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
.. sourcecode:: csharp

     <IncludedFilePlaceHolder>Examples\ResultAsValueType\Example.cs.snippet</IncludedFilePlaceHolder>

.. raw:: html

   <details>
   <summary>Click to expand the result of the query in example above (i.e., instance of <b>JsonQL.Query.IObjectQueryResult&lt;double&gt;</b>) serialized into <b>Result.json</b></summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsValueType\Result.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>


Result as Reference Type
~~~~~~~~~~~~~~~~~~~~~~~~

- In the example below the query result is expected to be of non-nullable type **IEmployee**. 
- If the result is null, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **ValueNotSet**. 

.. raw:: html

   <details>
   <summary>Click to expand <b>Company.json</b> used in query in example below</summary>

.. code-block:: json

    <IncludedFilePlaceHolder>..\..\..\JsonFiles\Companies.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
.. sourcecode:: csharp

     <IncludedFilePlaceHolder>Examples\ResultAsReferenceType\Example.cs.snippet</IncludedFilePlaceHolder>

.. raw:: html

   <details>
   <summary>Click to expand the result of the query in example above (i.e., instance of <b>JsonQL.Query.IObjectQueryResult&lt;IEmployee&gt;</b>) serialized into <b>Result.json</b></summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsReferenceType\Result.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
Result as List of Value Type Items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the example below the query result is expected to be of type **IReadOnlyList<double?>?**. The result can be  null and items in returned collection can be null as well in this example. 

- If we use **[false, true]** for **convertedValueNullability** and the query result is null, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **ValueNotSet**.
- If we use **[true, false]** for **convertedValueNullability** and the query result is not null, but there are null values in collection, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **NonNullableCollectionItemValueNotSet**.

.. raw:: html

   <details>
   <summary>Click to expand <b>Data.json</b> used in query in example below</summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsListOfValueTypeItems\Data.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
.. sourcecode:: csharp

     <IncludedFilePlaceHolder>Examples\ResultAsListOfValueTypeItems\Example.cs.snippet</IncludedFilePlaceHolder>

.. raw:: html

   <details>
   <summary>Click to expand the result of the query in example above (i.e., instance of <b>JsonQL.Query.IObjectQueryResult&lt;double&gt;</b>) serialized into <b>Result.json</b></summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsListOfValueTypeItems\Result.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
Result as Arrays of Reference Type Items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- In the example below the query result is expected to be of type **IEmployee?[]**. The result cannot be null and **IEmployee** items in returned collection can be null in this example. 
- If the returned array is null, there will be conversion error(s) of type `JsonQL.JsonToObjectConversion.IConversionError <https://github.com/artakhak/JsonQL/blob/main/JsonQL/JsonToObjectConversion/IConversionError.cs>`_ in result with value of **ErrorType** equal to **ValueNotSet**.

.. raw:: html

   <details>
   <summary>Click to expand <b>Employees.json</b> used in query in example below</summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsArraysOfReferenceTypeItems\Employees.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
.. sourcecode:: csharp

     <IncludedFilePlaceHolder>Examples\ResultAsArraysOfReferenceTypeItems\Example.cs.snippet</IncludedFilePlaceHolder>

.. raw:: html

   <details>
   <summary>Click to expand the result of the query in example above (i.e., instance of <b>IEmployee?[]</b>) serialized into <b>Result.json</b></summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsArraysOfReferenceTypeItems\Result.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>

Result as List of Arrays of Value Type Items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the example below the query result is expected to be of type **IReadOnlyList<double?[]>**.

.. raw:: html

   <details>
   <summary>Click to expand <b>Data.json</b> used in query in example below</summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsListOfArraysOfValueTypeItems\Data.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
.. sourcecode:: csharp

     <IncludedFilePlaceHolder>Examples\ResultAsListOfArraysOfValueTypeItems\Example.cs.snippet</IncludedFilePlaceHolder>

.. raw:: html

   <details>
   <summary>Click to expand the result of the query in example above (i.e., instance of <b>JsonQL.Query.IObjectQueryResult&lt;IReadOnlyList&lt;double?[]&gt;&gt;</b>) serialized into <b>Result.json</b></summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsListOfArraysOfValueTypeItems\Result.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
Result as List of Lists of Reference Type Items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the example below the query result is expected to be of type **List<IReadOnlyList<IEmployee?>?>**.

.. raw:: html

   <details>
   <summary>Click to expand <b>CompaniesOrganizedAsArraysOfArrays.json</b> used in query in example below</summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsListOfListsOfReferenceTypeItems\CompaniesOrganizedAsArraysOfArrays.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>
   
.. sourcecode:: csharp

     <IncludedFilePlaceHolder>Examples\ResultAsListOfListsOfReferenceTypeItems\Example.cs.snippet</IncludedFilePlaceHolder>

.. raw:: html

   <details>
   <summary>Click to expand the result of the query in example above (i.e., instance of <b>List&lt;IReadOnlyList&lt;IEmployee?&gt;?&gt;</b>) serialized into <b>Result.json</b></summary>

.. code-block:: json

    <IncludedFilePlaceHolder>Examples\ResultAsListOfListsOfReferenceTypeItems\Result.json</IncludedFilePlaceHolder>

.. raw:: html

   </details><br/><br/>