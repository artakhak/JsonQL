======
JsonQL
======

.. contents::
   :local:
   :depth: 2
   
- **JsonQL** is a powerful JSON query language implementation that provides a flexible way to query and manipulate JSON data using a SQL/Linq-like syntax with rich function support.
- All aspects of implementations are extensible (custom operators, functions, path elements, etc. can be added). JsonQL expressions are used in JSON texts and are parsed by JsonQL library.
- Allows using JsonQL expressions in one or more JSON files to mutate JSON files. JsonQL parses the mutated JSON files with JsonQL expressions to generate a JSON structure.
- Supports executing JsonQL queries against one ore more JSON files. The query result is converted either to C# model classes (depending on API used).

  .. note::
          Model classes used for de-serialization can be either C# classes or interfaces, and the properties can be of class or interface types. JsonQL will either use default implementations of interfaces, or will use classes specified by the developer.

- Errors are reported in JsonQL error classes that have error position data as well as additional data.

Features
========

- Rich set of built-in functions for JSON manipulation
- Support for aggregate functions (COUNT, AVG, MIN, MAX, SUM)
- Collection manipulation with ANY and ALL operations
- String operations (ToUpper, ToLower, Length, Concatenate, etc)
- Type conversion functions (DateTime, Date, Double, Int, Boolean, String)
- Mathematical operations (Abs, IsEven, IsOdd)
- Object property inspection (HasField)
- Lambda expression support for complex queries
- Extensible function architecture
- Built-in conversion of query results to C# objects

  .. note:: 
    JsonQL binds interfaces to default implementations and also supports binding interfaces to any class via configuration**

- Mutating JSON files by replacing JSON field values by evaluated JSON values
- Extending the API to provide custom operators, functions, as well as customizing any part of JsonQL implementation

.. note::
  JsonQL Expressions start with '$'. Example "$value(Employees.Select(x => x.Salary >= 100000))".

Using JsonQL Expressions to Mutate JSON Files 
=============================================

- JsonQL expressions are used in one or many JSON files. JsonQL evaluates JsonQL expressions and loads the parsed JSON files with expressions replaced with calculated JSON objects into an instance of `JsonQL.Compilation.ICompilationResult <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Compilation/ICompilationResult.cs>`_.
- The property **CompiledJsonFiles** contains collection of `JsonQL.Compilation.ICompiledJsonData <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Compilation/ICompiledJsonData.cs>`_: one per loaded file. 
- `JsonQL.Compilation.ICompiledJsonData <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Compilation/ICompiledJsonData.cs>`_ represents mutated JSON files (i.e., mutated by using JsonQL expressions).  
- The property **CompilationErrors** contains collection of `JsonQL.Compilation.ICompilationErrorItem <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Compilation/ICompilationErrorItem.cs>`_ with error details if any. 
- If many JSON files are specified the following rules and techniques are used:
  - Parent/child relationships between JSON files are maintained, and parent JSON files are evaluated before child JSON files are evaluated.
  - Lookup of JSON values specified in JsonQL expressions starts in JSON containing the expression first, and then in parent JSON files.


Example: JsonQL expressions to mutate JSON files
------------------------------------------------

An overview example of mutating multiple JSON files is `here <https://github.com/artakhak/JsonQL/tree/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL.Demos/Examples/IJsonCompilerExamples/SuccessExamples/Overview>`_.

In this example the following JSON files are processed with JSON files appearing earlier being processed as parents JSON files appearing later:

  - :doc:`./Examples/json-with-json-ql-expressions.data-1`
  - :doc:`./Examples/json-with-json-ql-expressions.data-2`
  - :doc:`./Examples/json-with-json-ql-expressions.data-3`
  - :doc:`./Examples/json-with-json-ql-expressions.data-4`

- The file :doc:`./Examples/json-with-json-ql-expressions.data-4` file with JsonQL expressions is shown below.

.. sourcecode:: json

     <IncludedFilePlaceHolder>..\Examples\IJsonCompilerExamples\SuccessExamples\Overview\Overview.json</IncludedFilePlaceHolder>

- C# code example that parses the JSON files above

.. sourcecode:: csharp

    <IncludedFilePlaceHolder>Examples\json-with-json-ql-expressions.cs.example</IncludedFilePlaceHolder>

- Result of a query above for can be found here: :doc:`./Examples/json-with-json-ql-expressions.result`

  .. note::
    The serialized result in :doc:`./Examples/json-with-json-ql-expressions.result` was formatted to show only mutated JSON for :doc:`./Examples/json-with-json-ql-expressions.data-4` to make the file smaller.  

JsonQL queries of JSON Files with Result Converted to C# objects
================================================================

- The interface `JsonQL.Query.IQueryManager <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Query/IQueryManager.cs>`_ and its extensions are used to query one or more JSON files using a JsonQL query expression.
- The result is converted to `JsonQL.Query.IObjectQueryResult<T> <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Query/IObjectQueryResult.cs>`_ a C# interface of class specified in generic parameter.
- The result stores the query result converted to type 'T' as well as data about errors encountered during execution of the query.
- The type parameter 'T' specified in query method specifies the return object type from query. It can be any class (value of reference type) including collection types.
- The type parameter 'T' specified in query is for a collection type, the collection item parameters can be interfaces or classes as well  (value of reference type). 
- Nullable syntax '?' can be specified for return type (including collection item types, if return type is a collection).
- One ore more JSON files can be specified as parameters to be used when looking up JSON values referenced by JsonQL expressions.
- If many JSON files are specified the the following rules and techniques are used:
  - Parent/child relationships between JSON files is maintained and parent JSON files are evaluated before child JSON files are evaluated.
  - Lookup of JSON values specified in JsonQL expressions starts in JSON containing the expression first, and then in parent JSON files.

Example: Query and convert JSON to C# objects
---------------------------------------------

.. sourcecode:: csharp

    <IncludedFilePlaceHolder>Examples\query-and-convert-json-to-csharp-objects.cs.example</IncludedFilePlaceHolder>

- Files evaluated in JsonQL query above are listed here:
   - :doc:`./Examples/query-and-convert-json-to-csharp-objects.data-1`
   
- Result of query above can be found here: :doc:`./Examples/query-and-convert-json-to-csharp-objects.result`
- Example classes and JSON files for this example can be found `here <https://github.com/artakhak/JsonQL/tree/main/JsonQL.Demos/Examples/IQueryManagerExamples/SuccessExamples/ResultAsObject/ResultAsNonNullableEmployeesList>`_

Example: Query and convert JSON to collection of double values
--------------------------------------------------------------

- Files evaluated in JsonQL query below are listed here:
   - :doc:`./Examples/query-and-convert-json-to-collection-of-doubles.data-1`
        
.. sourcecode:: csharp

    <IncludedFilePlaceHolder>Examples\query-and-convert-json-to-collection-of-doubles.cs.example</IncludedFilePlaceHolder>

- Result of query above can be found here: :doc:`./Examples/query-and-convert-json-to-collection-of-doubles.result`
- Example classes and JSON files for this example can be found `here <https://github.com/artakhak/JsonQL/tree/main/JsonQL.Demos/Examples/IQueryManagerExamples/SuccessExamples/ResultAsObject/SalariesOfAllEmployeesInAllCompaniesAsReadOnlyListOfDoubles>`_

JsonQL queries of JSON Files with Result Converted to JSON structure
====================================================================

- The interface `JsonQL.Query.IQueryManager  <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Query/IQueryManager.cs>`_ and its extensions are used to query one or more JSON files using a JsonQL query expression.
- The result is converted to `JsonQL.Query.IJsonValueQueryResult <https://github.com/artakhak/JsonQL/blob/f4341606f1a14f355c13eb35c717bba55e8c76e3/JsonQL/Query/IJsonValueQueryResult.cs>`_.
- The result stores the query result as a JSON structure as well as data about errors encountered during execution of the query.
- One ore more JSON files can be specified as parameters to be used when looking up JSON values referenced by JsonQL expressions.
- If many JSON files are specified the the following rules and techniques are used:
  - Parent/child relationships between JSON files is maintained and parent JSON files are evaluated before child JSON files are evaluated.
  - Lookup of JSON values specified in JsonQL expressions starts in JSON containing the expression first, and then in parent JSON files.

Example: Query JSON files with result as JSON structure
-------------------------------------------------------

- Files evaluated in JsonQL query below are listed here:
   - :doc:`./Examples/query-with-result-as-json-object-1.data`
        
.. sourcecode:: csharp

    <IncludedFilePlaceHolder>Examples\query-with-result-as-json-object.cs.example</IncludedFilePlaceHolder>

- Result of query above can be found here: :doc:`./Examples/query-with-result-as-json-object.result`
- Example classes and JSON files for this example can be found `here <https://github.com/artakhak/JsonQL/tree/main/JsonQL.Demos/Examples/IQueryManagerExamples/SuccessExamples/ResultAsParsedJsonValue/CompaniesWithLimitOnMaxSalary>`_

.. toctree::

   MutatingJsonFiles/index.rst
   QueryingJsonFiles/index.rst
   LambdaFunctions/index.rst
   SpecialKeywords/index.rst
   JsonMutatorOperators/index.rst
   JsonPathFunctions/index.rst
   Functions/index.rst
   AggregateFunctions/index.rst
   Operators/index.rst
   OptionalAndNamedParameters/index.rst 
   DependencyInjectionSetup/index.rst
   CustomJsonQL/index.rst
   FutureReleases/index.rst

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`