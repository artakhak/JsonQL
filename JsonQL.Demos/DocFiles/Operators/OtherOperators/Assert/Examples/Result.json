{
  "CompiledJsonFiles":[
    {
      "TextIdentifier": "Examples",
      "CompiledParsedValue":
      {
        "Assert_Succeeds_1":  true,
        "Assert_Succeeds_2":  true,
        "Comments_Assert_Succeeds_3":  "'e.Age assert' succeeds for employees since 'Age' is not null or undefined for all employees",
        "Assert_Succeeds_3": [
          {
            "Id":  100000001,
            "Name":  "John Smith",
            "Address": {
              "Street":  "456 Oak Avenue",
              "City":  "Chicago",
              "State":  "IL",
              "ZipCode":  "60601"
            },
            "Age":  45
          },
          {
            "Id":  100000003,
            "Name":  "Michael Brown",
            "Address": {
              "Street":  "789 Pine Lane",
              "City":  "Los Angeles",
              "State":  "CA",
              "ZipCode":  "90001"
            },
            "Salary":  105000,
            "Age":  50
          },
          {
            "Id":  100000004,
            "Name":  "Emily Davis",
            "Address": {
              "Street":  "321 Elm Drive",
              "City":  "Houston",
              "State":  "TX",
              "ZipCode":  "77001"
            },
            "Salary":  92000,
            "Age":  42
          }
        ],
        "Comments_No_Assert_1":  "Some values e.Salary are null or undefined (keys are missing).",
        "Comments_No_Assert_2":  "'e.Salary >= 100000' will be false for all employees with missing or null Salary value",
        "No_Assert": [
          {
            "Id":  100000003,
            "Name":  "Michael Brown",
            "Address": {
              "Street":  "789 Pine Lane",
              "City":  "Los Angeles",
              "State":  "CA",
              "ZipCode":  "90001"
            },
            "Salary":  105000,
            "Age":  50
          }
        ],
        "Comments_AssertFails_1":  "Some values e.Salary are null or undefined (keys are missing).",
        "Comments_AssertFails_2":  "Check 'e.Salary assert >= 1000000' will fail the compilation (compilation will stop with assertion errors)",
        "Comments_AssertFails_3":  "on first employee with missing or null value for 'Salary' (e.g., employee with Id=100000001 which has no 'Salary' key)",
        "AssertFails":  "$value(Employees.Where(e => e.Salary assert >= 100000))"
      }
    }
  ],
  "CompilationErrors":
  {
    "$type": "System.Collections.Generic.List`1[[JsonQL.Compilation.ICompilationErrorItem, JsonQL]], System.Private.CoreLib",
    "$values": [
      {
        "$type": "JsonQL.Compilation.CompilationErrorItem, JsonQL",
        "JsonTextIdentifier": "Examples",
        "LineInfo": {
          "$type": "JsonQL.JsonObjects.JsonLineInfo, JsonQL",
          "LineNumber": 15,
          "LinePosition": 47
        },
        "ErrorMessage": "Value not-null assertion failed"
      }
    ]
  }
}