{
  "Assert_Succeeds_1": "$value(Int1 assert == 15)",
  "Assert_Succeeds_2": "$value(Text1 assert starts with 'Text')",

  "Comments_Assert_Succeeds_3": "'e.Age assert' succeeds for employees since 'Age' is not null or undefined for all employees",
  "Assert_Succeeds_3": "$value(Employees.Where(e => e.Age assert >= 40))",

  "Comments_No_Assert_1": "Some values e.Salary are null or undefined (keys are missing).",
  "Comments_No_Assert_2": "'e.Salary >= 100000' will be false for all employees with missing or null Salary value",
  "No_Assert": "$value(Employees.Where(e => e.Salary >= 100000))",

  "Comments_AssertFails_1": "Some values e.Salary are null or undefined (keys are missing).",
  "Comments_AssertFails_2": "Check 'e.Salary assert >= 1000000' will fail the compilation (compilation will stop with assertion errors)",
  "Comments_AssertFails_3": "on first employee with missing or null value for 'Salary' (e.g., employee with Id=100000001 which has no 'Salary' key)",
  "AssertFails": "$value(Employees.Where(e => e.Salary assert >= 100000))"
}