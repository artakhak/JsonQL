=======
Flatten
=======

.. contents::
   :local:
   :depth: 2
   
- The JSON path function 'Flatten' replaces a JSON array nested (used as an item) inside another array with items of the array. 
    - Result of "Flatten" function is similar to removing '[' and ']' braces in internal (nested) array to make the items of nested array into items of parent array.
- The path function 'Flatten' can be applied multiple times to keep linearizing more level in multi-dimensional arrays. Any multi-dimensional array can be made into one-dimensional array with big enough number of applications of 'Flatten' function.   
- Flatten only linearizes arrays, and it does not remove any data form collection (result of other functions) or JSON array. Therefore, once all arrays are flattened (linearized) after several applications of 'Flatten', new applications of 'Flatten' will result in a similar collection.
 
Function Parameters
===================

- **criteria**:
    - Required: No
    - Type: lambda function of type "x => boolean"
    - Description: A criteria used to filter out the items array before applying flaten operation. In other words, the items in collection/array are filtered out, and **Flatten** operation is applied to sub-arrays that are not filtered out. 

Example
=======

**Example.json** below demonstrates using **Flatten** path function with JsonQL.


.. sourcecode:: json

    <IncludedFilePlaceHolder>Example\Example.json</IncludedFilePlaceHolder>
    
The result (i.e., an instance of `JsonQL.Compilation.ICompilationResult <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/ICompilationResult.cs>`_) is serialized to a **Result.json** file below.

.. note::
    For brevity, the serialized result includes only serialized evaluated **Example.json** and does not include parent JSON files in **JsonQL.Compilation.ICompilationResult.CompiledJsonFiles**
 
.. sourcecode:: json

    <IncludedFilePlaceHolder>Example\Result.json</IncludedFilePlaceHolder>
   
The code snippet shows how the JSON file **Example.json** was parsed using `JsonQL.Compilation.IJsonCompiler <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/IJsonCompiler.cs>`_

.. sourcecode:: csharp

    <IncludedFilePlaceHolder>Example\Example.cs.snippet</IncludedFilePlaceHolder>