string[] sharedExamplesFolderPath = new string[] { "DocFiles", "MutatingJsonFiles", "Examples"};

var parametersJsonTextData = new JsonTextData("Parameters",
            this.LoadExampleJsonFile("Parameters.json"));

// countriesJsonTextData uses parametersJsonTextData for parameter parentJsonTextData
var countriesJsonTextData = new JsonTextData("Countries",
            LoadJsonFileHelpers.LoadJsonFile("Countries.json", _sharedExamplesFolderPath), parametersJsonTextData);

var companiesJsonTextData = new JsonTextData("Companies",
            LoadJsonFileHelpers.LoadJsonFile("Companies.json", _sharedExamplesFolderPath), countriesJsonTextData);

// Set the value of queryManager to an instance of JsonQL.Compilation.JsonCompiler here.
// The value of JsonQL.Compilation.JsonCompiler is normally created by Dependency Injection container 
// and it is normally configured as a singleton.
JsonQL.Compilation.IJsonCompiler jsonCompiler = null!;

var cachedCompilationResult = jsonCompiler.Compile(new JsonTextData("FilteredCompanies",
            this.LoadExampleJsonFile("FilteredCompanies.json"), companiesJsonTextData));

if (cachedCompilationResult.CompilationErrors.Count > 0)
            throw new ApplicationException("Compilation failed");
        
var compiledParents = new List<ICompiledJsonData>
{
    cachedCompilationResult.CompiledJsonFiles.First(x => x.TextIdentifier == "Companies")
};

var jsonThatDependsOnCompanies = 
       string.Concat(
       "{\"AllCompanyNames:\": \"$value(Companies.Select(x => x.CompanyData.Name))\"," +
       "\"AllCompanyEmployees:\": \"$value(Companies.Where(x => !(x.CompanyData.Name starts with 'Strange')).Select(x => x.Employees))\"}");

// Compile jsonThatDependsOnCompanies JSON using only compiled "Companies.json" as parents (in compiledParents)
var jsonThatDependsOnCompaniesResult = jsonCompiler.Compile(jsonThatDependsOnCompanies, "Json1", compiledParents);
// Do something with jsonThatDependsOnCompaniesResult here.

// NOTE: The list of parents compiledParents passed to _jsonCompiler.Compile() is organized in such a way
// that child JSON files appear earlier, and parent JSON files appear later.
// In this example "Example.json" will be treated as a child of "FilteredCompanies", "FilteredCompanies" will be treated as a child of
// "Companies" and so forth. 
// This relationship will ensure that JSON objects referenced in JsonQL expressions in "Example.json" will
// be looked up first in "Example.json", then in "FilteredCompanies", and so forth.
compiledParents =
[
    cachedCompilationResult.CompiledJsonFiles.First(x => x.TextIdentifier == "FilteredCompanies"),
    cachedCompilationResult.CompiledJsonFiles.First(x => x.TextIdentifier == "Companies"),
    cachedCompilationResult.CompiledJsonFiles.First(x => x.TextIdentifier == "Countries"),
    cachedCompilationResult.CompiledJsonFiles.First(x => x.TextIdentifier == "Parameters")
];

// Compile jsonThatDependsOnCompanies JSON using all four compiled JSON files as parents (in compiledParents)
var exampleJsonResult = jsonCompiler.Compile(this.LoadExampleJsonFile("Example.json"), "Example", compiledParents);
// Do something with exampleJsonResult here.
