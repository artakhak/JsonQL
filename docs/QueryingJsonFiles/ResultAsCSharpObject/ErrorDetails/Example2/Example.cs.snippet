// This query will fail since not all values of IEmployee.Age are non-null in a result set.
var query = "Companies.Select(c => c.Employees.Where(e => e.Address is null))";

// Set the value of queryManager to an instance of JsonQL.Query.IQueryManager here.
// The value of JsonQL.Query.IQueryManager is normally created by Dependency Injection container 
// and it is normally configured as a singleton.
JsonQL.Query.IQueryManager queryManager = null!;

var employeesResult =
    queryManager.QueryObject<IReadOnlyList<IEmployee>>(query,
        new JsonTextData("Companies",
            LoadJsonFileHelpers.LoadJsonFile("Companies.json", ["DocFiles", "QueryingJsonFiles", "JsonFiles"])), 
        convertedValueNullability:null,
        jsonConversionSettingOverrides:
        new JsonConversionSettingsOverrides
        {
            // NOTE: jsonConversionSettingOverrides parameter of type IJsonConversionSettingsOverrides
            // is an optional, and we do not have to provide this parameter of default settings work 
            // for us (which is most of the cases).
            // However, the parameter is specified here as an example
            ConversionErrorTypeConfigurations = [
                // Note, we only need to provide configurations that we want to override.
                // Default configurations will be used for any error type that is not specified in 
                // ConversionErrorTypeConfigurations collection
                new ConversionErrorTypeConfiguration(ConversionErrorType.NonNullablePropertyNotSet, 
                    // The default error reporting type of ConversionErrorType.NonNullablePropertyNotSet is
                    // ErrorReportingType.ReportAsError.
                    // This is just a demo how the default configuration can be overridden
                    ErrorReportingType.ReportAsError)] 
        });

Assert.That(employeesResult.ErrorsAndWarnings.ConversionErrors.Errors.Count, Is.GreaterThan(0));