========
Examples
========

.. contents::
   :local:
   :depth: 2
   

Examples in **Examples.json** file below demonstrate logical operators described in :doc:`../index`

.. note:: The following JSON files are referenced in JsonQL expressions in **Examples.json** in example below:
    
    - :doc:`data`
    - :doc:`../../../MutatingJsonFiles/SampleFiles/companies`


.. sourcecode:: json

    {
      "Assert_Succeeds_1": "$value(Int1 assert == 15)",
      "Assert_Succeeds_2": "$value(Text1 assert starts with 'Text')",

      "Comments_Assert_Succeeds_3": "'e.Age assert' succeeds for employees since 'Age' is not null or undefined for all employees",
      "Assert_Succeeds_3": "$value(Employees.Where(e => e.Age assert >= 40))",

      "Comments_No_Assert_1": "Some values e.Salary are null or undefined (keys are missing).",
      "Comments_No_Assert_2": "'e.Salary >= 100000' will be false for all employees with missing or null Salary value",
      "No_Assert": "$value(Employees.Where(e => e.Salary >= 100000))",

      "Comments_AssertFails_1": "Some values e.Salary are null or undefined (keys are missing).",
      "Comments_AssertFails_2": "Check 'e.Salary assert >= 1000000' will fail the compilation (compilation will stop with assertion errors)",
      "Comments_AssertFails_3": "on first employee with missing or null value for 'Salary' (e.g., employee with Id=100000001 which has no 'Salary' key)",
      "AssertFails": "$value(Employees.Where(e => e.Salary assert >= 100000))"
    }
    
The result (i.e., an instance of `JsonQL.Compilation.ICompilationResult <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/ICompilationResult.cs>`_) is serialized to a **Result.json** file below.

.. note::
    For brevity, the serialized result includes only serialized evaluated **Examples.json** and does not include parent JSON files in **JsonQL.Compilation.ICompilationResult.CompiledJsonFiles**

.. raw:: html

   <details>
   <summary>Click to expand the result in instance of <b>JsonQL.Compilation.ICompilationResult</b> serialized into <b>Result.json</b></summary>

.. code-block:: json

    {
      "CompiledJsonFiles":[
        {
          "TextIdentifier": "Examples",
          "CompiledParsedValue":
          {
            "Operator_is_null": {
              "Comment_Operator_is_null_1":  "(invalid.path is null) evaluates to false. For invalid path check use 'is undefined' operator",
              "Operator_is_null_1":  true,
              "Operator_is_null_2":  true,
              "Operator_is_null_3":  true,
              "Operator_is_null_5":  true,
              "Comment_Operator_is_null_6_1":  "Even though the query below results in no employee being selected. The value is not null",
              "Comment_Operator_is_null_6_2":  "'is null' succeeds if there is JsonPath with null value.",
              "Comment_Operator_is_null_6_3":  "'Use 'is undefined' instead to check if query resulted in any value",
              "Operator_is_null_6":  true
            },
            "Operator_is_not_null": {
              "Comment_Operator_is_not_null_1":  "(invalid.path is not null) evaluates to true.",
              "Operator_is_not_null_1":  true,
              "Operator_is_not_null_2":  true,
              "Operator_is_not_null_3":  true,
              "Operator_is_not_null_5":  true,
              "Operator_is_not_null_6":  true
            },
            "Operator_is_undefined": {
              "Comment_Operator_is_undefined_1":  "(invalid.path is undefined) evaluates to true.",
              "Operator_is_undefined_1":  true,
              "Operator_is_undefined_2":  true,
              "Operator_is_undefined_3":  true,
              "Operator_is_undefined_5":  true,
              "Operator_is_undefined_6":  true
            },
            "Operator_is_ not_undefined": {
              "Comment_Operator_is_not_undefined_1":  "(invalid.path is not undefined) evaluates to false.",
              "Operator_is_not_undefined_1":  true,
              "Operator_is_not_undefined_2":  true,
              "Operator_is_not_undefined_3":  true,
              "Operator_is_not_undefined_5":  true,
              "Operator_is_not_undefined_6":  true
            }
          }
        }
      ],
      "CompilationErrors":
      {
        "$type": "System.Collections.Generic.List`1[[JsonQL.Compilation.ICompilationErrorItem, JsonQL]], System.Private.CoreLib",
        "$values": []
      }
    }

.. raw:: html

   </details><br/><br/>

   
The code snippet shows how the JSON file **Examples.json** was parsed using `JsonQL.Compilation.IJsonCompiler <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/IJsonCompiler.cs>`_

.. sourcecode:: csharp

    // Set the value of jsonCompiler to an instance of JsonQL.Compilation.IJsonCompiler here.
    // The value of JsonQL.Compilation.JsonCompiler is normally created by Dependency Injection container 
    // and it is normally configured as a singleton.
    JsonQL.Compilation.IJsonCompiler jsonCompiler = null!;

    var dataJsonTextData = new JsonTextData("Data", this.LoadExampleJsonFile("Data.json"));
           
    var result = jsonCompiler.Compile(new JsonTextData("Examples",
    this.LoadExampleJsonFile("Examples.json"), dataJsonTextData));