====
Last
====

.. contents::
   :local:
   :depth: 2
   
- The JSON path function 'Last' is pretty similar to JSON path function :doc:`../At/index`, except it is used to reference the last JSON value in JSON array or JSON collection (i.e., JSON array generated by applying JsonQL expressions, such as JSON path function 'Where', or 'Flatten').
- The main difference between 'At' and 'Last' is that 'Last' has only one parameter **criteria**, as it does not require the other parameters used by 'At'.

Function Parameters
===================

- **criteria**:
    - Required: No
    - Type: lambda function of type "x => boolean"
    - Description: A criteria used to filter the result. If the parameter is not null, the first item matching criteria will be selected while searching the collection in reverse order will be selected, rather than the last item in collection.

Example
=======

.. note:: The following JSON files are referenced in JsonQL expressions in **Example.json** in example below:  :doc:`./Example/data`.

**Example.json** below demonstrates using **Last** path function.


.. sourcecode:: json

    {
      "Object1": {
        "EvenNumbersArray": [
          2,
          4,
          "Test",
          [ 1, 3 ],
          6,
          10
        ],

        "Array1": [
          1,
          2,
          "Test",
          {
            "EmployeeId": 1
          },
          [ 5, "test", 20 ],
          6,
          13,
          4
        ],
        "EmptyArray": []
      },
      "Comment_Line1": "NOTE: Array indexers can be applied only to arrays, and not on collections resulted from using Where(), Flatten() and others,",
      "Comment_Line2": "and the following expression will not work",
      "Comment_Line3": "(Object1.Array1.Where(x => x != 4)[6]))",
      "Comment_Line4": "and At(6) or Last() function should be used instead as shown below",
      "Get_Last_Item_In_Result_Of_Where": "$value(Object1.Array1.Where(x => x != 4).Last())",

      "Last_Using_Named_Parameters": "$value(Object1.Array1.Where(x => x != 1).Last(criteria -> x => x >= 10))",

      "GetLastEmployeeWithSalaryGreaterThan_100000": "$value(parent.Object1.Companies.Flatten().Where(x => x.EmployeeId > 0 && x.Salary > 100000).Last())",
      "GetLastItemInArray": "$(Object1.Array1.Last())",
      "Predicate_In_Last_GetLastItemInArray_NotEqualTo_4": "$(Object1.Array1.Last(x => x != 4))",
      "Predicate_In_Last_FirstCompanyWithLastEmployeeId_202": "$value parent.Object1.Companies.First(x => x.Last(x => !HasField(x, 'Name')).EmployeeId == 202)"
    }
    
The result (i.e., an instance of `JsonQL.Compilation.ICompilationResult <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/ICompilationResult.cs>`_) is serialized to a **Result.json** file below.

.. note::
    For brevity, the serialized result includes only serialized evaluated **Example.json** and does not include parent JSON files in **JsonQL.Compilation.ICompilationResult.CompiledJsonFiles**
 
.. sourcecode:: json

    {
      "CompiledJsonFiles":[
        {
          "TextIdentifier": "Example",
          "CompiledParsedValue":
          {
            "Object1": {
              "EvenNumbersArray": [
                2,
                4,
                "Test",
                [
                  1,
                  3
                ],
                6,
                10
              ],
              "Array1": [
                1,
                2,
                "Test",
                {
                  "EmployeeId":  1
                },
                [
                  5,
                  "test",
                  20
                ],
                6,
                13,
                4
              ],
              "EmptyArray": [
              ]
            },
            "Comment_Line1":  "NOTE: Array indexers can be applied only to arrays, and not on collections resulted from using Where(), Flatten() and others,",
            "Comment_Line2":  "and the following expression will not work",
            "Comment_Line3":  "(Object1.Array1.Where(x => x != 4)[6]))",
            "Comment_Line4":  "and At(6) or Last() function should be used instead as shown below",
            "Get_Last_Item_In_Result_Of_Where":  13,
            "Last_Using_Named_Parameters":  13,
            "GetLastEmployeeWithSalaryGreaterThan_100000": {
              "EmployeeId":  202,
              "Age":  59,
              "Salary":  175000
            },
            "GetLastItemInArray":  "4",
            "Predicate_In_Last_GetLastItemInArray_NotEqualTo_4":  "13",
            "Predicate_In_Last_FirstCompanyWithLastEmployeeId_202": [
              {
                "Name":  "Company3"
              },
              {
                "EmployeeId":  201,
                "Age":  39,
                "Salary":  103000
              },
              {
                "EmployeeId":  202,
                "Age":  59,
                "Salary":  175000
              }
            ]
          }
        }
      ],
      "CompilationErrors":
      {
        "$type": "System.Collections.Generic.List`1[[JsonQL.Compilation.ICompilationErrorItem, JsonQL]], System.Private.CoreLib",
        "$values": []
      }
    }
   
The code snippet shows how the JSON file **Example.json** was parsed using `JsonQL.Compilation.IJsonCompiler <https://github.com/artakhak/JsonQL/blob/main/JsonQL/Compilation/IJsonCompiler.cs>`_

.. sourcecode:: csharp

    // Set the value of jsonCompiler to an instance of JsonQL.Compilation.IJsonCompiler here.
    // The value of JsonQL.Compilation.JsonCompiler is normally created by Dependency Injection container 
    // and it is normally configured as a singleton.
    JsonQL.Compilation.IJsonCompiler jsonCompiler = null!;

    var result = jsonCompiler.Compile(
         new JsonTextData("Example", this.LoadExampleJsonFile("Example.json"),
         new JsonTextData("Data", this.LoadExampleJsonFile("Data.json"))));